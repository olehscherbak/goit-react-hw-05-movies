{"version":3,"file":"static/js/964.b3dbd593.chunk.js","mappings":"oLACA,EAA4B,0B,SCEb,SAASA,IACtB,OACE,gBAAKC,UAAWC,EAAhB,UACE,SAAC,KAAD,CAAcC,MAAM,UAGzB,C,oICRD,G,QAA4B,2BAA5B,EAAkE,0BAAlE,EAAwG,0BAAxG,EAA8I,0B,oBCA9I,EAA6B,+BAA7B,EAAgF,sCAAhF,EAA2I,uCAA3I,EAA6M,6C,SCG9L,SAASC,EAAT,GAAmC,IAAbC,EAAY,EAAZA,SAMnC,OACE,kBAAMJ,UAAWC,EAAgBG,SANd,SAAAC,GACnBA,EAAIC,iBACJF,EAASC,EAAIE,OAAOC,MAAMC,MAAMC,cAAcC,OAC/C,EAGC,WACE,kBACEX,UAAWC,EACXW,KAAK,OACLC,KAAK,QACLC,aAAa,MACbC,WAAS,KAEX,oBAAQH,KAAK,SAASZ,UAAWC,EAAjC,WACE,SAAC,MAAD,CAAUe,KAAM,WAChB,iBAAMhB,UAAWC,EAAjB,yBAIP,CCfc,SAASgB,IAAU,IAAD,EAC/B,GAAgCC,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACMC,GAAWC,EAAAA,EAAAA,MACjB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAW,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,IAGjDC,EAAAA,EAAAA,YAAU,WACR,GAAoB,KAAhBF,EAAoB,CACtBN,GAAa,GACb,IAAMS,EAAO,kHAA8GH,EAA9G,+BACbI,MAAMD,GACHE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAb,IACbF,MAAK,SAAAG,GACJhB,EAAYgB,EAAIC,SACO,IAAvBD,EAAIC,QAAQC,QACVC,EAAAA,GAAAA,KAAW,uCACd,IACAC,OAAM,kBAAMD,EAAAA,GAAAA,MAAY,gCAAlB,IACNE,SAAQ,kBAAMnB,GAAa,EAAnB,GACZ,CACF,GAAE,CAACM,IAOJ,OACE,iCACE,SAACzB,EAAD,CAAYC,SAPI,SAAAsC,GAElBf,EAAgB,CAAEnB,MAAOkC,GAC1B,IAKIvB,EAASmB,OAAS,IACjB,eAAItC,UAAWC,EAAf,SACGkB,EAASwB,KAAI,YAA0B,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOhC,EAAW,EAAXA,KAC1B,OACE,eAAab,UAAWC,EAAxB,UACE,UAAC,KAAD,CACE6C,GAAE,kBAAaF,GACfG,MAAO,CAAEC,KAAMzB,GACfvB,UAAWC,EAHb,WAKE,SAAC,MAAD,CAAae,KAAM,QAAShB,UAAWC,IACtC4C,GAAShC,MAPL+B,EAWZ,MAGJvB,IAAa,SAACtB,EAAA,EAAD,KACd,SAAC,KAAD,MAGL,C","sources":["webpack://react-homework-template/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx","webpack://react-homework-template/./src/pages/Movies/Movies.module.css?82ee","webpack://react-homework-template/./src/components/SearchForm/SearchForm.module.css?d6f1","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Loader_container__X02md\"};","import { InfinitySpin } from 'react-loader-spinner';\nimport css from './Loader.module.css';\n\nexport default function Loader() {\n  return (\n    <div className={css.container}>\n      <InfinitySpin color=\"blue\" />\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"film_list\":\"Movies_film_list__YisAm\",\"film_link\":\"Movies_film_link__eSSBR\",\"film_item\":\"Movies_film_item__qNwPL\",\"film_icon\":\"Movies_film_icon__nWTLM\"};","// extracted by mini-css-extract-plugin\nexport default {\"searchForm\":\"SearchForm_searchForm__NsJpF\",\"search_form_input\":\"SearchForm_search_form_input__NMJFa\",\"search_form_button\":\"SearchForm_search_form_button__sV85Y\",\"search_form_button_label\":\"SearchForm_search_form_button_label__FhL6C\"};","import { BsSearch } from 'react-icons/bs';\nimport PropTypes from 'prop-types';\nimport css from './SearchForm.module.css';\n\nexport default function SearchForm({ onSubmit }) {\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    onSubmit(evt.target.query.value.toLowerCase().trim());\n  };\n\n  return (\n    <form className={css.searchForm} onSubmit={handleSubmit}>\n      <input\n        className={css.search_form_input}\n        type=\"text\"\n        name=\"query\"\n        autoComplete=\"off\"\n        autoFocus\n      />\n      <button type=\"submit\" className={css.search_form_button}>\n        <BsSearch size={'0.8em'} />\n        <span className={css.search_form_button_label}>Search</span>\n      </button>\n    </form>\n  );\n}\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport { GiFilmStrip } from 'react-icons/gi';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport css from './Movies.module.css';\nimport Loader from 'components/Loader/Loader';\nimport SearchForm from 'components/SearchForm/SearchForm';\n\nexport default function Movies() {\n  const [filmList, setFilmList] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const querySearch = searchParams.get('query') ?? '';\n  // const [query, setQuery] = useState(querySearch);\n\n  useEffect(() => {\n    if (querySearch !== '') {\n      setIsLoading(true);\n      const request = `https://api.themoviedb.org/3/search/movie?api_key=3fffdfe7cecd1a69958de862b7a37291&language=en-US&query=${querySearch}&page=1&include_adult=false`;\n      fetch(request)\n        .then(response => response.json())\n        .then(res => {\n          setFilmList(res.results);\n          res.results.length === 0 &&\n            toast.warn('Oops, nothing match your request :( ');\n        })\n        .catch(() => toast.error('Oops, something went wrong...'))\n        .finally(() => setIsLoading(false));\n    }\n  }, [querySearch]);\n\n  const changeQuery = newQuery => {\n    // setQuery(newQuery);\n    setSearchParams({ query: newQuery });\n  };\n\n  return (\n    <>\n      <SearchForm onSubmit={changeQuery} />\n      {filmList.length > 0 && (\n        <ul className={css.film_list}>\n          {filmList.map(({ id, title, name }) => {\n            return (\n              <li key={id} className={css.film_item}>\n                <Link\n                  to={`/movies/${id}`}\n                  state={{ from: location }}\n                  className={css.film_link}\n                >\n                  <GiFilmStrip size={'0.8em'} className={css.film_icon} />\n                  {title || name}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n      {isLoading && <Loader />}\n      <ToastContainer />\n    </>\n  );\n}\n"],"names":["Loader","className","css","color","SearchForm","onSubmit","evt","preventDefault","target","query","value","toLowerCase","trim","type","name","autoComplete","autoFocus","size","Movies","useState","filmList","setFilmList","isLoading","setIsLoading","location","useLocation","useSearchParams","searchParams","setSearchParams","querySearch","get","useEffect","request","fetch","then","response","json","res","results","length","toast","catch","finally","newQuery","map","id","title","to","state","from"],"sourceRoot":""}